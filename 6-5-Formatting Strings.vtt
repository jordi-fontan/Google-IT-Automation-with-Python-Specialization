WEBVTT

1
00:00:00.025 --> 00:00:07.833
[MUSIC]

2
00:00:07.833 --> 00:00:11.614
Up to now we've been making strings
using the plus sign to just concatenate

3
00:00:11.614 --> 00:00:13.843
the parts of the string
we wanted to create.

4
00:00:13.843 --> 00:00:17.275
And we've used the str function to
convert numbers into strings so

5
00:00:17.275 --> 00:00:19.187
that we can concatenate them, too.

6
00:00:19.187 --> 00:00:21.174
This works, but it's not ideal,

7
00:00:21.174 --> 00:00:25.982
especially when the operations you want to
do with the string or on the tricky side.

8
00:00:25.982 --> 00:00:29.413
There's a better way to do
this using the format method.

9
00:00:29.413 --> 00:00:31.236
Let's see a couple of examples.

10
00:00:45.027 --> 00:00:48.040
In this example, we have two variables,
name and number.

11
00:00:48.040 --> 00:00:51.991
We generate a string that has those
variables in it by using the curly

12
00:00:51.991 --> 00:00:56.600
brackets placeholder to show where
the variables should be written.

13
00:00:56.600 --> 00:01:00.500
We then pass the variables as
a parameter to the format method.

14
00:01:00.500 --> 00:01:04.074
See how it doesn't matter that name
is a string and number is an integer?

15
00:01:04.074 --> 00:01:06.867
The format method deals with that,
so we don't have to.

16
00:01:06.867 --> 00:01:08.123
Pretty neat, right?

17
00:01:08.123 --> 00:01:11.617
The curly brackets aren't always empty.

18
00:01:11.617 --> 00:01:14.313
By using certain expressions
inside those brackets,

19
00:01:14.313 --> 00:01:17.547
we can take advantage of the full
power of the format expression.

20
00:01:17.547 --> 00:01:20.586
Heads up, this can get complex fast.

21
00:01:20.586 --> 00:01:25.276
If at any point, you get confused, don't
panic, you only really need to understand

22
00:01:25.276 --> 00:01:27.964
the basic usage of the format
method we just saw.

23
00:01:27.964 --> 00:01:31.168
One of the things we can put inside
the curly brackets is the name of

24
00:01:31.168 --> 00:01:34.964
the variable we want in that position
to make the whole string more readable.

25
00:01:34.964 --> 00:01:39.494
This is particularly relevant when the
text can get rewritten or translated and

26
00:01:39.494 --> 00:01:41.597
the variables might switch places.

27
00:01:41.597 --> 00:01:43.069
In our earlier example,

28
00:01:43.069 --> 00:01:47.775
we could rewrite the message to make
the variables appear in a different order.

29
00:01:47.775 --> 00:01:48.489
In that case,

30
00:01:48.489 --> 00:01:52.119
we'd need to pass the parameters to
format in a slightly different way.

31
00:02:00.064 --> 00:02:03.695
Because we're using placeholders with
variable names, the order in which

32
00:02:03.695 --> 00:02:06.882
the variables are passed to
the format function doesn't matter.

33
00:02:06.882 --> 00:02:10.938
But for this to work, we need to set
the names we're going to use and

34
00:02:10.938 --> 00:02:14.359
assign a value to them inside
the parameters to format.

35
00:02:14.359 --> 00:02:20.956
And that's just the tip of the iceberg of
what we can do with the format method.

36
00:02:20.956 --> 00:02:21.940
Want to dive a little deeper?

37
00:02:21.940 --> 00:02:24.700
Great, let's keep on going.

38
00:02:24.700 --> 00:02:26.043
We're going to check out
a different example.

39
00:02:26.043 --> 00:02:30.923
Let's say you want to output the price
of an item with and without tax.

40
00:02:30.923 --> 00:02:32.880
Depending on what the tax rate is,

41
00:02:32.880 --> 00:02:36.900
the number might be a long
number with a bunch of decimals.

42
00:02:36.900 --> 00:02:41.796
So if something costs $7.5 without tax and

43
00:02:41.796 --> 00:02:48.586
the tax rate is 9%,
the price with tax would be $8.175.

44
00:02:48.586 --> 00:02:53.041
First off, ouch, and also, since there's
no such thing as half a penny anymore,

45
00:02:53.041 --> 00:02:55.300
that number doesn't make sense.

46
00:02:55.300 --> 00:03:00.000
So to fix this we can make the format
function print only two decimals,

47
00:03:00.000 --> 00:03:00.700
like this.

48
00:03:16.800 --> 00:03:21.178
In this case between the curly brackets
we're writing a formatting expression.

49
00:03:21.178 --> 00:03:24.420
There are a bunch of different
expressions we can write.

50
00:03:24.420 --> 00:03:28.624
These expressions are needed when we want
to tell Python to format our values in

51
00:03:28.624 --> 00:03:30.930
a way that's different from the default.

52
00:03:30.930 --> 00:03:34.747
The expression starts with a colon to
separate it from the field name that we

53
00:03:34.747 --> 00:03:35.425
saw before.

54
00:03:35.425 --> 00:03:40.258
After the colon, we write .2f.

55
00:03:40.258 --> 00:03:43.252
This means we're going to
format a float number and

56
00:03:43.252 --> 00:03:46.470
that there should be two
digits after the decimal dot.

57
00:03:46.470 --> 00:03:52.004
So no matter what the price is,
our function always prints two decimals.

58
00:03:52.004 --> 00:03:56.625
Remember when we did the table to convert
from Fahrenheit to Celsius temperatures?

59
00:03:56.625 --> 00:04:00.360
Our table looked kind of ugly because it
was full of float numbers that had way too

60
00:04:00.360 --> 00:04:01.438
many decimal digits.

61
00:04:01.438 --> 00:04:05.252
Using the format function,
we can make it look a lot nicer.

62
00:04:05.252 --> 00:04:09.982
In these two expressions we're using
the greater than operator to align text to

63
00:04:09.982 --> 00:04:12.816
the right so
that the output is neatly aligned.

64
00:04:12.816 --> 00:04:17.269
In the first expression we're saying
we want the numbers to be aligned to

65
00:04:17.269 --> 00:04:19.613
the right for a total of three spaces.

66
00:04:19.613 --> 00:04:24.453
In the second expression we're saying we
want the number to always have exactly two

67
00:04:24.453 --> 00:04:28.900
decimal places and we want to align
it to the right at six spaces.

68
00:04:28.900 --> 00:04:33.121
We can use string formatting like this to
make the output of our program look nice

69
00:04:33.121 --> 00:04:36.406
and also to generate useful logging and
debugging messages.

70
00:04:36.406 --> 00:04:38.428
Over the course of my sysadmin career,

71
00:04:38.428 --> 00:04:43.200
I've grown used to formatting strings to
create more informative error messages.

72
00:04:43.200 --> 00:04:45.499
They help me understand what's going
on with a script that's failing.

73
00:04:45.499 --> 00:04:49.584
There's a ton more formatting options
you can use when you need them.

74
00:04:49.584 --> 00:04:51.727
But don't worry about
learning them all at once,

75
00:04:51.727 --> 00:04:55.146
we'll explain any others as they come
along and we'll put everything in a cheat

76
00:04:55.146 --> 00:04:58.229
sheet that you can refer to whenever
you need a formatting expression.

77
00:04:58.229 --> 00:04:59.894
Let's take a look at that now and

78
00:04:59.894 --> 00:05:04.100
then we'll have a quiz to help you get
more familiar with all this new knowledge.