WEBVTT

1
00:00:07.856 --> 00:00:12.400
We said earlier that we had a lot
of new exciting concepts coming up.

2
00:00:12.400 --> 00:00:16.200
Well, I'm not going to
string you along anymore.

3
00:00:16.200 --> 00:00:19.700
We're going to tie up our lessons on
strings with a bunch of fun methods for

4
00:00:19.700 --> 00:00:21.700
transforming our string text.

5
00:00:21.700 --> 00:00:23.785
I know, I know,
my jokes are pretty terrible, so

6
00:00:23.785 --> 00:00:25.237
let's get back to the good stuff.

7
00:00:25.237 --> 00:00:29.662
So far, we've seen ways you can access
portions of strings using the indexing

8
00:00:29.662 --> 00:00:34.425
technique, create new strings by slicing
and concatenating, find characters and

9
00:00:34.425 --> 00:00:38.937
strings using the index method, and
even test if one string contains another.

10
00:00:38.937 --> 00:00:41.383
On top of all this
string processing power,

11
00:00:41.383 --> 00:00:45.492
the string class provides a bunch of
other methods for working with text.

12
00:00:45.492 --> 00:00:48.376
Now, we'll show you how to
use some of these methods.

13
00:00:48.376 --> 00:00:51.600
Remember, the goal is not for
you to memorize all of this.

14
00:00:51.600 --> 00:00:55.900
Instead, we want to give you an idea of
what you can do with strings in Python.

15
00:00:55.900 --> 00:00:58.700
Some string methods let you
perform transformations or

16
00:00:58.700 --> 00:01:04.200
formatting on the string text,
like upper, and its opposite, lower.

17
00:01:04.200 --> 00:01:07.926
These methods are really useful
when you're handling user input.

18
00:01:07.926 --> 00:01:12.000
Let's say you wanted to check if
the user answered yes to a question.

19
00:01:12.000 --> 00:01:15.805
How would you know if the user
typed it using upper or lower case?

20
00:01:15.805 --> 00:01:19.449
You don't need to, you just transform
the answer to the case you want.

21
00:01:19.449 --> 00:01:20.643
Like this example.

22
00:01:30.903 --> 00:01:35.370
Another useful method when dealing
with user input is the strip method.

23
00:01:35.370 --> 00:01:39.100
This method will get rid of
surrounding spaces in the string.

24
00:01:39.100 --> 00:01:41.200
If we ask the user for an answer,

25
00:01:41.200 --> 00:01:43.700
we usually don't care about
any surrounding spaces.

26
00:01:43.700 --> 00:01:48.100
So it's a good idea to use the strip
method to get rid of any white space.

27
00:01:48.100 --> 00:01:52.200
This means that strip doesn't just
remove spaces, it also removes tabs and

28
00:01:52.200 --> 00:01:53.200
new line characters,

29
00:01:53.200 --> 00:01:57.000
which are all characters we don't
usually want in user-provided strings.

30
00:01:57.000 --> 00:02:02.100
There are two more versions of
this method, lstrip rstrip,

31
00:02:02.100 --> 00:02:05.000
to get rid of the whitespace
characters just to the left or

32
00:02:05.000 --> 00:02:07.600
to the right of the string
instead of both sides.

33
00:02:08.800 --> 00:02:12.385
Other methods give you information
about the string itself.

34
00:02:12.385 --> 00:02:17.808
The method count returns how many times
a given substring appears within a string.

35
00:02:19.514 --> 00:02:24.730
The method endswith returns whether
the string ends with a certain substring.

36
00:02:30.494 --> 00:02:36.910
The method isnumeric returns whether
the string's made up of just numbers.

37
00:02:36.910 --> 00:02:40.144
Adding to that,
if we have a string that is numeric,

38
00:02:40.144 --> 00:02:43.900
we can use the int function to
convert it to an actual number.

39
00:02:45.100 --> 00:02:50.100
In earlier videos, we showed that we can
concatenate strings using the plus sign.

40
00:02:50.100 --> 00:02:53.074
The join method can also be used for
concatenating.

41
00:03:05.106 --> 00:03:10.367
To use the join method, we have to call it
on the string that'll be used for joining.

42
00:03:10.367 --> 00:03:13.518
In this case,
we're using a string with a space in it.

43
00:03:13.518 --> 00:03:15.739
The method receives a list of strings and

44
00:03:15.739 --> 00:03:20.300
returns one string with each of
the strings joined by the initial string.

45
00:03:20.300 --> 00:03:22.008
Let's check out another example.

46
00:03:38.068 --> 00:03:42.129
Finally, we can also split
a string into a list of strings.

47
00:03:48.114 --> 00:03:52.359
The split method returns a list of all
the words in the initial string and

48
00:03:52.359 --> 00:03:55.063
it automatically splits by any whitespace.

49
00:03:55.063 --> 00:03:57.473
It can optionally take a parameter and

50
00:03:57.473 --> 00:04:01.472
split the strings by another character,
like a comma or a dot.

51
00:04:01.472 --> 00:04:04.900
Are you starting to see how these string
methods could be useful in your IT job?

52
00:04:06.200 --> 00:04:09.149
Okay, so
we've just learned a bunch of new methods.

53
00:04:09.149 --> 00:04:11.901
But there are tons more that
you can use on strings.

54
00:04:11.901 --> 00:04:14.995
We've included a list with
the ones we talked about, and

55
00:04:14.995 --> 00:04:17.066
some new ones in the next cheat sheet.

56
00:04:17.066 --> 00:04:20.647
You'll also find a link to the full
Python documentation there,

57
00:04:20.647 --> 00:04:23.656
which gives you all the info
on each available method.

58
00:04:23.656 --> 00:04:27.459
As we've said before, don't worry
about trying to memorize everything.

59
00:04:27.459 --> 00:04:29.962
You'll pick these concepts
up with practice, and

60
00:04:29.962 --> 00:04:32.417
the documentation is always
there if you need it.

61
00:04:32.417 --> 00:04:35.646
All right,
last up in our string of string videos,

62
00:04:35.646 --> 00:04:38.736
we're going to check out
how to format strings.